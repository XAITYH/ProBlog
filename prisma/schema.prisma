generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String? @unique
  name     String?
  password String?
  image    String?

  emailVerified DateTime? @default(now())

  accounts Account[]
  sessions Session[]

  posts Post[]

  likedPosts  LikedPost[]
  collections Collection[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String
  topic       String
  extra       String?

  files File[]

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  likedBy     LikedPost[]
  collections Collection[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("post")
}

model File {
  id  Int    @id @default(autoincrement())
  url String

  post   Post @relation(fields: [postId], references: [id])
  postId Int  @map("post_id")

  @@map("file")
}

model LikedPost {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int    @map("post_id")

  isVisible Boolean @default(false) @map("is_visible")

  @@unique([userId, postId])
}

model Collection {
  id     String  @id @default(cuid())
  name   String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @map("user_id")
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int     @map("post_id")

  isVisible Boolean @default(false) @map("is_visible")

  @@unique([userId, postId])
}
